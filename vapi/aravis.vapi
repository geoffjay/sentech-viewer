/* aravis.vapi generated by vapigen, do not modify. */

[CCode (cprefix = "Arv", gir_namespace = "Aravis", gir_version = "0.6", lower_case_cprefix = "arv_")]
namespace Arv {
	[CCode (cheader_filename = "arv.h", type_id = "arv_buffer_get_type ()")]
	public class Buffer : GLib.Object {
		[CCode (has_construct_function = false)]
		[Version (since = "0.2.0")]
		public Buffer (size_t size, void* preallocated);
		[CCode (has_construct_function = false)]
		[Version (since = "0.2.3")]
		public Buffer.allocate (size_t size);
		[CCode (has_construct_function = false)]
		[Version (since = "0.2.0")]
		public Buffer.full (size_t size, void* preallocated, void* user_data, GLib.DestroyNotify user_data_destroy_func);
		[CCode (array_length_pos = 1.1)]
		[Version (since = "0.4.0")]
		public unowned uint8[] get_chunk_data (uint64 chunk_id);
		[CCode (array_length_pos = 0.1, array_length_type = "size_t")]
		[Version (since = "0.4.0")]
		public unowned uint8[] get_data ();
		[Version (since = "0.4.0")]
		public uint32 get_frame_id ();
		[Version (since = "0.4.0")]
		public int get_image_height ();
		[Version (since = "0.4.0")]
		public Arv.PixelFormat get_image_pixel_format ();
		[Version (since = "0.4.0")]
		public void get_image_region (out int? x, out int? y, out int? width, out int? height);
		[Version (since = "0.4.0")]
		public int get_image_width ();
		[Version (since = "0.4.0")]
		public int get_image_x ();
		[Version (since = "0.4.0")]
		public int get_image_y ();
		[Version (since = "0.4.0")]
		public Arv.BufferPayloadType get_payload_type ();
		[Version (since = "0.4.0")]
		public Arv.BufferStatus get_status ();
		[Version (since = "0.6.0")]
		public uint64 get_system_timestamp ();
		[Version (since = "0.4.0")]
		public uint64 get_timestamp ();
		[Version (since = "0.4.0")]
		public void* get_user_data ();
		[Version (since = "0.6.0")]
		public void set_system_timestamp (uint64 timestamp_ns);
		[Version (since = "0.4.0")]
		public void set_timestamp (uint64 timestamp_ns);
	}
	[CCode (cheader_filename = "arv.h", type_id = "arv_camera_get_type ()")]
	public class Camera : GLib.Object {
		[CCode (has_construct_function = false)]
		[Version (since = "0.2.0")]
		public Camera (string? name);
		[Version (since = "0.4.0")]
		public void abort_acquisition ();
		[Version (since = "0.6.0")]
		public Arv.Buffer acquisition (uint64 timeout);
		[Version (since = "0.6.0")]
		public void clear_triggers ();
		[Version (since = "0.4.0")]
		public Arv.ChunkParser create_chunk_parser ();
		[Version (since = "0.2.0")]
		public Arv.Stream create_stream (Arv.StreamCallback? callback);
		[Version (since = "0.2.0")]
		public Arv.AcquisitionMode get_acquisition_mode ();
		[CCode (array_length_pos = 0.1, array_length_type = "guint")]
		[Version (since = "0.2.0")]
		public int64[] get_available_pixel_formats ();
		[CCode (array_length_pos = 0.1, array_length_type = "guint")]
		[Version (since = "0.2.0")]
		public (unowned string)[] get_available_pixel_formats_as_display_names ();
		[CCode (array_length_pos = 0.1, array_length_type = "guint")]
		[Version (since = "0.2.0")]
		public (unowned string)[] get_available_pixel_formats_as_strings ();
		[CCode (array_length_pos = 0.1, array_length_type = "guint")]
		[Version (since = "0.6.0")]
		public (unowned string)[] get_available_trigger_sources ();
		[CCode (array_length_pos = 0.1, array_length_type = "guint")]
		[Version (since = "0.6.0")]
		public (unowned string)[] get_available_triggers ();
		[Version (since = "0.2.0")]
		public void get_binning (out int dx, out int dy);
		[Version (since = "0.4.0")]
		public bool get_chunk_mode ();
		[Version (since = "0.4.0")]
		public bool get_chunk_state (string chunk);
		[Version (since = "0.2.0")]
		public unowned Arv.Device get_device ();
		[Version (since = "0.2.0")]
		public unowned string get_device_id ();
		[Version (since = "0.2.0")]
		public double get_exposure_time ();
		[Version (since = "0.2.0")]
		public Arv.Auto get_exposure_time_auto ();
		[Version (since = "0.2.0")]
		public void get_exposure_time_bounds (out double min, out double max);
		[Version (since = "0.6.0")]
		public int64 get_frame_count ();
		[Version (since = "0.6.0")]
		public void get_frame_count_bounds (out int64 min, out int64 max);
		[Version (since = "0.2.0")]
		public double get_frame_rate ();
		public void get_frame_rate_bounds (out double min, out double max);
		[Version (since = "0.2.0")]
		public double get_gain ();
		[Version (since = "0.2.0")]
		public Arv.Auto get_gain_auto ();
		[Version (since = "0.2.0")]
		public void get_gain_bounds (out double min, out double max);
		[Version (since = "0.6.0")]
		public void get_height_bounds (out int min, out int max);
		[Version (since = "0.2.0")]
		public unowned string get_model_name ();
		[Version (since = "0.2.0")]
		public uint get_payload ();
		[Version (since = "0.2.0")]
		public Arv.PixelFormat get_pixel_format ();
		[Version (since = "0.2.0")]
		public unowned string get_pixel_format_as_string ();
		[Version (since = "0.2.0")]
		public void get_region (out int x, out int y, out int width, out int height);
		[Version (since = "0.2.0")]
		public void get_sensor_size (out int width, out int height);
		[Version (since = "0.2.0")]
		public unowned string get_trigger_source ();
		[Version (since = "0.2.0")]
		public unowned string get_vendor_name ();
		[Version (since = "0.6.0")]
		public void get_width_bounds (out int min, out int max);
		[Version (since = "0.6.0")]
		public void get_x_binning_bounds (out int min, out int max);
		[Version (since = "0.6.0")]
		public void get_x_offset_bounds (out int min, out int max);
		[Version (since = "0.6.0")]
		public void get_y_binning_bounds (out int min, out int max);
		[Version (since = "0.6.0")]
		public void get_y_offset_bounds (out int min, out int max);
		[Version (since = "0.6.0")]
		public uint gv_auto_packet_size ();
		[Version (since = "0.4.0")]
		public int gv_get_current_stream_channel ();
		[Version (since = "0.4.0")]
		public int gv_get_n_stream_channels ();
		[Version (since = "0.4.0")]
		public int64 gv_get_packet_delay ();
		[Version (since = "0.4.0")]
		public uint gv_get_packet_size ();
		[Version (since = "0.4.0")]
		public void gv_select_stream_channel (int channel_id);
		[Version (since = "0.4.0")]
		public void gv_set_packet_delay (int64 delay_ns);
		[Version (since = "0.4.0")]
		public void gv_set_packet_size (uint packet_size);
		[Version (since = "0.6.0")]
		public void gv_set_stream_options (Arv.GvStreamOption options);
		[Version (since = "0.6.0")]
		public bool is_binning_available ();
		[Version (since = "0.2.0")]
		public bool is_exposure_auto_available ();
		[Version (since = "0.2.0")]
		public bool is_exposure_time_available ();
		[Version (since = "0.2.0")]
		public bool is_frame_rate_available ();
		[Version (since = "0.2.0")]
		public bool is_gain_auto_available ();
		[Version (since = "0.2.0")]
		public bool is_gain_available ();
		[Version (since = "0.4.0")]
		public bool is_gv_device ();
		[Version (since = "0.6.0")]
		public bool is_uv_device ();
		public void set_acquisition_mode (Arv.AcquisitionMode value);
		[Version (since = "0.6.0")]
		public void set_binning (int dx, int dy);
		[Version (since = "0.4.0")]
		public void set_chunk_mode (bool is_active);
		[Version (since = "0.4.0")]
		public void set_chunk_state (string chunk, bool is_enabled);
		[Version (since = "0.4.0")]
		public void set_chunks (string chunk_list);
		[Version (since = "0.2.0")]
		public void set_exposure_time (double exposure_time_us);
		[Version (since = "0.2.0")]
		public void set_exposure_time_auto (Arv.Auto auto_mode);
		[Version (since = "0.6.0")]
		public void set_frame_count (int64 frame_count);
		[Version (since = "0.2.0")]
		public void set_frame_rate (double frame_rate);
		[Version (since = "0.2.0")]
		public void set_gain (double gain);
		[Version (since = "0.2.0")]
		public void set_gain_auto (Arv.Auto auto_mode);
		[Version (since = "0.2.0")]
		public void set_pixel_format (Arv.PixelFormat format);
		[Version (since = "0.2.0")]
		public void set_pixel_format_from_string (string format);
		[Version (since = "0.2.0")]
		public void set_region (int x, int y, int width, int height);
		[Version (since = "0.2.0")]
		public void set_trigger (string source);
		[Version (since = "0.2.0")]
		public void set_trigger_source (string source);
		[Version (since = "0.2.0")]
		public void software_trigger ();
		[Version (since = "0.2.0")]
		public void start_acquisition ();
		[Version (since = "0.2.0")]
		public void stop_acquisition ();
		[Version (since = "0.6.0")]
		public uint uv_get_bandwidth ();
		[Version (since = "0.6.0")]
		public void uv_get_bandwidth_bounds (out uint min, out uint max);
		[Version (since = "0.6.0")]
		public bool uv_is_bandwidth_control_available ();
		[Version (since = "0.6.0")]
		public void uv_set_bandwidth (uint bandwidth);
		public Arv.Device device { get; construct; }
	}
	[CCode (cheader_filename = "arv.h", type_id = "arv_chunk_parser_get_type ()")]
	public class ChunkParser : GLib.Object {
		[CCode (has_construct_function = false)]
		[Version (since = "0.4.0")]
		public ChunkParser (string xml, size_t size);
		public double get_float_value (Arv.Buffer buffer, string chunk);
		public int64 get_integer_value (Arv.Buffer buffer, string chunk);
		public unowned string get_string_value (Arv.Buffer buffer, string chunk);
		[NoAccessorMethod]
		public Arv.Gc genicam { owned get; construct; }
	}
	[CCode (cheader_filename = "arv.h", type_id = "arv_device_get_type ()")]
	public abstract class Device : GLib.Object {
		[CCode (has_construct_function = false)]
		protected Device ();
		[Version (since = "0.4.0")]
		public Arv.ChunkParser create_chunk_parser ();
		[Version (since = "0.2.0")]
		public virtual Arv.Stream create_stream (Arv.StreamCallback callback);
		[Version (since = "0.2.0")]
		public void execute_command (string feature);
		public int64 get_available_enumeration_feature_values (string feature, uint n_values);
		[CCode (array_length_pos = 1.1, array_length_type = "guint")]
		[Version (since = "0.2.0")]
		public (unowned string)[] get_available_enumeration_feature_values_as_strings (string feature);
		[Version (since = "0.6.0")]
		public bool get_boolean_feature_value (string feature);
		[Version (since = "0.2.0")]
		public unowned Arv.GcNode get_feature (string feature);
		public void get_float_feature_bounds (string feature, double min, double max);
		public double get_float_feature_value (string feature);
		[Version (since = "0.2.0")]
		public virtual unowned Arv.Gc get_genicam ();
		[Version (since = "0.2.0")]
		public virtual unowned string get_genicam_xml (out size_t size);
		public void get_integer_feature_bounds (string feature, out int64 min, out int64 max);
		public int64 get_integer_feature_value (string feature);
		public Arv.DeviceStatus get_status ();
		public unowned string get_string_feature_value (string feature);
		[Version (since = "0.2.0")]
		public virtual bool read_memory (uint64 address, uint32 size, void* buffer) throws GLib.Error;
		[Version (since = "0.2.0")]
		public virtual bool read_register (uint64 address, out uint32 value) throws GLib.Error;
		[Version (since = "0.6.0")]
		public void set_boolean_feature_value (string feature, bool value);
		public void set_float_feature_value (string feature, double value);
		public void set_integer_feature_value (string feature, int64 value);
		public void set_string_feature_value (string feature, string value);
		[Version (since = "0.2.0")]
		public virtual bool write_memory (uint64 address, uint32 size, owned void* buffer) throws GLib.Error;
		[Version (since = "0.2.0")]
		public virtual bool write_register (uint64 address, uint32 value) throws GLib.Error;
		[Version (since = "0.2.0")]
		public virtual signal void control_lost ();
	}
	[CCode (cheader_filename = "arv.h", type_id = "arv_dom_character_data_get_type ()")]
	public abstract class DomCharacterData : Arv.DomNode {
		public weak string data;
		[CCode (has_construct_function = false)]
		protected DomCharacterData ();
		public unowned string get_data ();
		public void set_data (string value);
	}
	[CCode (cheader_filename = "arv.h", type_id = "arv_dom_document_get_type ()")]
	public abstract class DomDocument : Arv.DomNode {
		public weak string url;
		[CCode (has_construct_function = false)]
		protected DomDocument ();
		public void append_from_memory (Arv.DomNode node, void* buffer, int size) throws GLib.Error;
		public virtual Arv.DomElement create_element (string tag_name);
		public virtual Arv.DomText create_text_node (string data);
		[CCode (has_construct_function = false)]
		public DomDocument.from_memory (void* buffer, int size) throws GLib.Error;
		[CCode (has_construct_function = false)]
		public DomDocument.from_path (string path) throws GLib.Error;
		[CCode (has_construct_function = false)]
		public DomDocument.from_url (string url) throws GLib.Error;
		public virtual unowned Arv.DomElement get_document_element ();
		public void* get_href_data (string href, size_t size);
		public unowned string get_url ();
		public void save_to_memory (void* buffer, int size) throws GLib.Error;
		public void save_to_path (string path) throws GLib.Error;
		public void save_to_stream (GLib.OutputStream stream) throws GLib.Error;
		public void save_to_url (string path) throws GLib.Error;
		public void set_path (string path);
		public void set_url (string url);
	}
	[CCode (cheader_filename = "arv.h", type_id = "arv_dom_document_fragment_get_type ()")]
	public abstract class DomDocumentFragment : Arv.DomNode {
		[CCode (has_construct_function = false)]
		public DomDocumentFragment ();
	}
	[CCode (cheader_filename = "arv.h", type_id = "arv_dom_element_get_type ()")]
	public abstract class DomElement : Arv.DomNode {
		[CCode (has_construct_function = false)]
		protected DomElement ();
		public virtual unowned string get_attribute (string name);
		[NoWrapper]
		public virtual string get_serialized_attributes ();
		public unowned string get_tag_name ();
		public virtual void set_attribute (string name, string attribute_value);
	}
	[CCode (cheader_filename = "arv.h", type_id = "arv_dom_named_node_map_get_type ()")]
	public abstract class DomNamedNodeMap : GLib.Object {
		[CCode (has_construct_function = false)]
		protected DomNamedNodeMap ();
		public virtual unowned Arv.DomNode get_item (uint index);
		public virtual uint get_length ();
		public unowned Arv.DomNode get_named_item (string name);
		public unowned Arv.DomNode remove_named_item (string name);
		public unowned Arv.DomNode set_named_item (Arv.DomNode item);
	}
	[CCode (cheader_filename = "arv.h", type_id = "arv_dom_node_get_type ()")]
	public abstract class DomNode : GLib.Object {
		public weak Arv.DomNode first_child;
		public weak Arv.DomNode last_child;
		public weak Arv.DomNode next_sibling;
		public weak Arv.DomNode parent_node;
		public weak Arv.DomNode previous_sibling;
		[CCode (has_construct_function = false)]
		protected DomNode ();
		public unowned Arv.DomNode append_child (owned Arv.DomNode new_child);
		[NoWrapper]
		public virtual bool can_append_child (Arv.DomNode new_child);
		public virtual void changed ();
		[NoWrapper]
		public virtual bool child_changed (Arv.DomNode child);
		public unowned Arv.DomNodeList get_child_nodes ();
		public unowned Arv.DomNode get_first_child ();
		public unowned Arv.DomNode get_last_child ();
		public unowned Arv.DomNode get_next_sibling ();
		public virtual unowned string get_node_name ();
		public virtual Arv.DomNodeType get_node_type ();
		public virtual unowned string get_node_value ();
		public unowned Arv.DomDocument get_owner_document ();
		public unowned Arv.DomNode get_parent_node ();
		public unowned Arv.DomNode get_previous_sibling ();
		public bool has_child_nodes ();
		public unowned Arv.DomNode insert_before (owned Arv.DomNode new_child, Arv.DomNode ref_child);
		[NoWrapper]
		public virtual void post_new_child (Arv.DomNode child);
		[NoWrapper]
		public virtual void pre_remove_child (Arv.DomNode child);
		public Arv.DomNode remove_child (Arv.DomNode old_child);
		public Arv.DomNode replace_child (owned Arv.DomNode new_child, Arv.DomNode old_child);
		public virtual void set_node_value (string new_value);
		public virtual void write_to_stream (GLib.OutputStream stream) throws GLib.Error;
	}
	[CCode (cheader_filename = "arv.h", type_id = "arv_dom_node_list_get_type ()")]
	public abstract class DomNodeList : GLib.Object {
		[CCode (has_construct_function = false)]
		protected DomNodeList ();
		public virtual unowned Arv.DomNode get_item (uint index);
		public virtual uint get_length ();
	}
	[CCode (cheader_filename = "arv.h", type_id = "arv_dom_text_get_type ()")]
	public class DomText : Arv.DomCharacterData {
		[CCode (has_construct_function = false, type = "ArvDomNode*")]
		public DomText (string data);
	}
	[CCode (cheader_filename = "arv.h", type_id = "arv_evaluator_get_type ()")]
	public class Evaluator : GLib.Object {
		[CCode (has_construct_function = false)]
		public Evaluator (string? expression);
		public double evaluate_as_double () throws GLib.Error;
		public int64 evaluate_as_int64 () throws GLib.Error;
		[Version (since = "0.6.0")]
		public unowned string get_constant (string name);
		public unowned string get_expression ();
		[Version (since = "0.6.0")]
		public unowned string get_sub_expression (string name);
		[Version (since = "0.6.0")]
		public void set_constant (string name, string? constant);
		public void set_double_variable (string name, double v_double);
		public void set_expression (string expression);
		public void set_int64_variable (string name, int64 v_int64);
		[Version (since = "0.6.0")]
		public void set_sub_expression (string name, string? expression);
	}
	[CCode (cheader_filename = "arv.h", type_id = "arv_fake_camera_get_type ()")]
	public class FakeCamera : GLib.Object {
		[CCode (has_construct_function = false)]
		public FakeCamera (string serial_number);
		public void fill_buffer (Arv.Buffer buffer, uint32 packet_size);
		public uint32 get_acquisition_status ();
		public uint32 get_control_channel_privilege ();
		public uint32 get_heartbeat_timeout ();
		public size_t get_payload ();
		public uint64 get_sleep_time_for_next_frame (uint64 next_timestamp_us);
		public GLib.SocketAddress get_stream_address ();
		public bool read_memory (uint32 address, uint32 size, void* buffer);
		public bool read_register (uint32 address, uint32 value);
		public void set_control_channel_privilege (uint32 privilege);
		public void set_fill_pattern (Arv.FakeCameraFillPattern fill_pattern_callback);
		public void set_inet_address (GLib.InetAddress address);
		public void set_trigger_frequency (double frequency);
		public void wait_for_next_frame ();
		public bool write_memory (uint32 address, uint32 size, void* buffer);
		public bool write_register (uint32 address, uint32 value);
	}
	[CCode (cheader_filename = "arv.h", type_id = "arv_fake_device_get_type ()")]
	public class FakeDevice : Arv.Device {
		[CCode (has_construct_function = false, type = "ArvDevice*")]
		public FakeDevice (string serial_number);
		public unowned Arv.FakeCamera get_fake_camera ();
	}
	[CCode (cheader_filename = "arv.h", type_id = "arv_fake_interface_get_type ()")]
	public class FakeInterface : Arv.Interface {
		[CCode (has_construct_function = false)]
		protected FakeInterface ();
		public static unowned Arv.Interface get_instance ();
	}
	[CCode (cheader_filename = "arv.h", type_id = "arv_fake_stream_get_type ()")]
	public class FakeStream : Arv.Stream {
		[CCode (has_construct_function = false)]
		protected FakeStream ();
	}
	[CCode (cheader_filename = "arv.h", type_id = "arv_gc_get_type ()")]
	public class Gc : Arv.DomDocument {
		[CCode (has_construct_function = false)]
		public Gc (Arv.Device device, void* xml, size_t size);
		public unowned Arv.Buffer get_buffer ();
		public unowned Arv.Device get_device ();
		public unowned Arv.GcNode get_node (string name);
		public void register_feature_node (Arv.GcFeatureNode node);
		public void set_buffer (Arv.Buffer buffer);
		public void set_default_node_data (string node_name, string node_data);
	}
	[CCode (cheader_filename = "arv.h", type_id = "arv_gc_boolean_get_type ()")]
	public class GcBoolean : Arv.GcFeatureNode, Arv.GcInteger, Arv.GcInteger {
		public weak Arv.GcPropertyNode off_value;
		public weak Arv.GcPropertyNode on_value;
		[CCode (has_construct_function = false, type = "ArvGcNode*")]
		public GcBoolean ();
		public bool value { get; set; }
	}
	[CCode (cheader_filename = "arv.h", type_id = "arv_gc_category_get_type ()")]
	public class GcCategory : Arv.GcFeatureNode {
		public weak GLib.SList<void*> features;
		[CCode (has_construct_function = false, type = "ArvGcNode*")]
		public GcCategory ();
		public unowned GLib.SList<string> get_features ();
	}
	[CCode (cheader_filename = "arv.h", type_id = "arv_gc_command_get_type ()")]
	public class GcCommand : Arv.GcFeatureNode {
		public weak Arv.GcPropertyNode command_value;
		public weak Arv.GcPropertyNode value;
		[CCode (has_construct_function = false, type = "ArvGcNode*")]
		public GcCommand ();
		public void execute () throws GLib.Error;
	}
	[CCode (cheader_filename = "arv.h", type_id = "arv_gc_converter_get_type ()")]
	public class GcConverter : Arv.GcFeatureNode, Arv.GcFloat, Arv.GcInteger {
		public weak Arv.Evaluator formula_from;
		public weak Arv.GcPropertyNode formula_from_node;
		public weak Arv.Evaluator formula_to;
		public weak Arv.GcPropertyNode formula_to_node;
		public weak Arv.GcPropertyNode unit;
		public weak Arv.GcPropertyNode value;
		public GLib.Type value_type;
		public weak GLib.SList<void*> variables;
		[CCode (has_construct_function = false, type = "ArvGcNode*")]
		public GcConverter ();
		[CCode (has_construct_function = false, type = "ArvGcNode*")]
		public GcConverter.integer ();
	}
	[CCode (cheader_filename = "arv.h", type_id = "arv_gc_enum_entry_get_type ()")]
	public class GcEnumEntry : Arv.GcFeatureNode {
		public weak Arv.GcPropertyNode value;
		[CCode (has_construct_function = false, type = "ArvGcNode*")]
		public GcEnumEntry ();
		public int64 get_value () throws GLib.Error;
	}
	[CCode (cheader_filename = "arv.h", type_id = "arv_gc_enumeration_get_type ()")]
	public class GcEnumeration : Arv.GcFeatureNode, Arv.GcInteger, Arv.GcString {
		public weak GLib.SList<void*> entries;
		public weak Arv.GcPropertyNode value;
		[CCode (has_construct_function = false, type = "ArvGcNode*")]
		public GcEnumeration ();
		public int64 get_available_int_values (uint n_values) throws GLib.Error;
		[CCode (array_length_pos = 0.1, array_length_type = "guint")]
		public (unowned string)[] get_available_string_values () throws GLib.Error;
		public unowned GLib.SList<Arv.GcFeatureNode> get_entries ();
		public int64 get_int_value () throws GLib.Error;
		public unowned string get_string_value () throws GLib.Error;
		public void set_int_value (int64 value) throws GLib.Error;
		public void set_string_value (string value) throws GLib.Error;
	}
	[CCode (cheader_filename = "arv.h", type_id = "arv_gc_feature_node_get_type ()")]
	public class GcFeatureNode : Arv.GcNode {
		[CCode (has_construct_function = false)]
		public GcFeatureNode ();
		public unowned string get_description () throws GLib.Error;
		public unowned string get_display_name () throws GLib.Error;
		public int get_modification_count ();
		public unowned string get_name ();
		public unowned string get_tooltip () throws GLib.Error;
		public virtual unowned string get_value_as_string () throws GLib.Error;
		public virtual GLib.Type get_value_type ();
		public void inc_modification_count ();
		public bool is_available () throws GLib.Error;
		public bool is_implemented () throws GLib.Error;
		public bool is_locked () throws GLib.Error;
		public virtual void set_value_from_string (string string) throws GLib.Error;
	}
	[CCode (cheader_filename = "arv.h", type_id = "arv_gc_float_node_get_type ()")]
	public class GcFloatNode : Arv.GcFeatureNode, Arv.GcFloat {
		public weak Arv.GcPropertyNode increment;
		public weak Arv.GcPropertyNode maximum;
		public weak Arv.GcPropertyNode minimum;
		public weak Arv.GcPropertyNode unit;
		public weak Arv.GcPropertyNode value;
		[CCode (has_construct_function = false, type = "ArvGcNode*")]
		public GcFloatNode ();
	}
	[CCode (cheader_filename = "arv.h", type_id = "arv_gc_group_node_get_type ()")]
	public class GcGroupNode : Arv.GcFeatureNode {
		public weak string comment;
		[CCode (has_construct_function = false, type = "ArvGcNode*")]
		public GcGroupNode ();
	}
	[CCode (cheader_filename = "arv.h", type_id = "arv_gc_index_node_get_type ()")]
	public class GcIndexNode : Arv.GcPropertyNode {
		public bool is_p_offset;
		public weak string offset;
		[CCode (has_construct_function = false, type = "ArvGcNode*")]
		public GcIndexNode ();
		public int64 get_index (int64 default_offset) throws GLib.Error;
	}
	[CCode (cheader_filename = "arv.h", type_id = "arv_gc_integer_node_get_type ()")]
	public class GcIntegerNode : Arv.GcFeatureNode, Arv.GcInteger {
		public weak Arv.GcPropertyNode increment;
		public weak Arv.GcPropertyNode maximum;
		public weak Arv.GcPropertyNode minimum;
		public weak Arv.GcPropertyNode unit;
		public weak Arv.GcPropertyNode value;
		[CCode (has_construct_function = false, type = "ArvGcNode*")]
		public GcIntegerNode ();
	}
	[CCode (cheader_filename = "arv.h", type_id = "arv_gc_invalidator_node_get_type ()")]
	public class GcInvalidatorNode : Arv.GcPropertyNode {
		public int modification_count;
		[CCode (has_construct_function = false, type = "ArvGcNode*")]
		public GcInvalidatorNode ();
		public int get_modification_count ();
		public void set_modification_count (int modification_count);
	}
	[CCode (cheader_filename = "arv.h", type_id = "arv_gc_node_get_type ()")]
	public abstract class GcNode : Arv.DomElement {
		[CCode (has_construct_function = false)]
		protected GcNode ();
		public unowned Arv.Gc get_genicam ();
	}
	[CCode (cheader_filename = "arv.h", type_id = "arv_gc_port_get_type ()")]
	public class GcPort : Arv.GcFeatureNode {
		[CCode (has_construct_function = false, type = "ArvGcNode*")]
		public GcPort ();
		public void read (void* buffer, uint64 address, uint64 length) throws GLib.Error;
		public void write (void* buffer, uint64 address, uint64 length) throws GLib.Error;
	}
	[CCode (cheader_filename = "arv.h", type_id = "arv_gc_property_node_get_type ()")]
	public class GcPropertyNode : Arv.GcNode {
		public weak string name;
		public Arv.GcPropertyNodeType type;
		public weak string value_data;
		public bool value_data_up_to_date;
		[CCode (has_construct_function = false)]
		protected GcPropertyNode ();
		[CCode (has_construct_function = false, type = "ArvGcNode*")]
		public GcPropertyNode.access_mode ();
		[CCode (has_construct_function = false, type = "ArvGcNode*")]
		public GcPropertyNode.address ();
		[CCode (has_construct_function = false, type = "ArvGcNode*")]
		public GcPropertyNode.bit ();
		[CCode (has_construct_function = false, type = "ArvGcNode*")]
		public GcPropertyNode.cachable ();
		[CCode (has_construct_function = false, type = "ArvGcNode*")]
		public GcPropertyNode.chunk_id ();
		[CCode (has_construct_function = false, type = "ArvGcNode*")]
		public GcPropertyNode.command_value ();
		[CCode (has_construct_function = false, type = "ArvGcNode*")]
		public GcPropertyNode.constant ();
		[CCode (has_construct_function = false, type = "ArvGcNode*")]
		public GcPropertyNode.description ();
		[CCode (has_construct_function = false, type = "ArvGcNode*")]
		public GcPropertyNode.display_name ();
		[CCode (has_construct_function = false, type = "ArvGcNode*")]
		public GcPropertyNode.endianess ();
		[CCode (has_construct_function = false, type = "ArvGcNode*")]
		public GcPropertyNode.expression ();
		[CCode (has_construct_function = false, type = "ArvGcNode*")]
		public GcPropertyNode.formula ();
		[CCode (has_construct_function = false, type = "ArvGcNode*")]
		public GcPropertyNode.formula_from ();
		[CCode (has_construct_function = false, type = "ArvGcNode*")]
		public GcPropertyNode.formula_to ();
		public double get_double () throws GLib.Error;
		public int64 get_int64 () throws GLib.Error;
		public unowned Arv.GcNode get_linked_node ();
		[Version (since = "0.6.0")]
		public unowned string get_name ();
		public Arv.GcPropertyNodeType get_node_type ();
		public unowned string get_string () throws GLib.Error;
		[CCode (has_construct_function = false, type = "ArvGcNode*")]
		public GcPropertyNode.increment ();
		[CCode (has_construct_function = false, type = "ArvGcNode*")]
		public GcPropertyNode.length ();
		[CCode (has_construct_function = false, type = "ArvGcNode*")]
		public GcPropertyNode.lsb ();
		[CCode (has_construct_function = false, type = "ArvGcNode*")]
		public GcPropertyNode.maximum ();
		[CCode (has_construct_function = false, type = "ArvGcNode*")]
		public GcPropertyNode.minimum ();
		[CCode (has_construct_function = false, type = "ArvGcNode*")]
		public GcPropertyNode.msb ();
		[CCode (has_construct_function = false, type = "ArvGcNode*")]
		public GcPropertyNode.off_value ();
		[CCode (has_construct_function = false, type = "ArvGcNode*")]
		public GcPropertyNode.on_value ();
		[CCode (has_construct_function = false, type = "ArvGcNode*")]
		public GcPropertyNode.p_address ();
		[CCode (has_construct_function = false, type = "ArvGcNode*")]
		public GcPropertyNode.p_command_value ();
		[CCode (has_construct_function = false, type = "ArvGcNode*")]
		public GcPropertyNode.p_feature ();
		[CCode (has_construct_function = false, type = "ArvGcNode*")]
		public GcPropertyNode.p_increment ();
		[CCode (has_construct_function = false, type = "ArvGcNode*")]
		public GcPropertyNode.p_is_available ();
		[CCode (has_construct_function = false, type = "ArvGcNode*")]
		public GcPropertyNode.p_is_implemented ();
		[CCode (has_construct_function = false, type = "ArvGcNode*")]
		public GcPropertyNode.p_is_locked ();
		[CCode (has_construct_function = false, type = "ArvGcNode*")]
		public GcPropertyNode.p_length ();
		[CCode (has_construct_function = false, type = "ArvGcNode*")]
		public GcPropertyNode.p_maximum ();
		[CCode (has_construct_function = false, type = "ArvGcNode*")]
		public GcPropertyNode.p_minimum ();
		[CCode (has_construct_function = false, type = "ArvGcNode*")]
		public GcPropertyNode.p_port ();
		[CCode (has_construct_function = false, type = "ArvGcNode*")]
		public GcPropertyNode.p_value ();
		[CCode (has_construct_function = false, type = "ArvGcNode*")]
		public GcPropertyNode.p_variable ();
		[CCode (has_construct_function = false, type = "ArvGcNode*")]
		public GcPropertyNode.polling_time ();
		public void set_double (double v_double) throws GLib.Error;
		public void set_int64 (int64 v_int64) throws GLib.Error;
		public void set_string (string string) throws GLib.Error;
		[CCode (has_construct_function = false, type = "ArvGcNode*")]
		public GcPropertyNode.sign ();
		[CCode (has_construct_function = false, type = "ArvGcNode*")]
		public GcPropertyNode.tooltip ();
		[CCode (has_construct_function = false, type = "ArvGcNode*")]
		public GcPropertyNode.unit ();
		[CCode (has_construct_function = false, type = "ArvGcNode*")]
		public GcPropertyNode.value ();
	}
	[CCode (cheader_filename = "arv.h", type_id = "arv_gc_register_description_node_get_type ()")]
	public class GcRegisterDescriptionNode : Arv.GcFeatureNode {
		public uint major_version;
		public uint minor_version;
		public weak string model_name;
		public uint schema_major_version;
		public uint schema_minor_version;
		public uint schema_subminor_version;
		public uint subminor_version;
		public weak string vendor_name;
		[CCode (has_construct_function = false, type = "ArvGcNode*")]
		public GcRegisterDescriptionNode ();
		public bool check_schema_version (uint required_major, uint required_minor, uint required_subminor);
		[Version (since = "0.6.0")]
		public int compare_schema_version (uint major, uint minor, uint subminor);
	}
	[CCode (cheader_filename = "arv.h", type_id = "arv_gc_register_node_get_type ()")]
	public class GcRegisterNode : Arv.GcFeatureNode, Arv.GcFloat, Arv.GcInteger, Arv.GcRegister, Arv.GcString {
		public weak Arv.GcPropertyNode access_mode;
		public weak GLib.SList<void*> addresses;
		public weak Arv.GcPropertyNode cachable;
		public void* cache;
		public size_t cache_size;
		public weak Arv.GcPropertyNode endianess;
		public weak Arv.GcPropertyNode index;
		public weak GLib.SList<void*> invalidators;
		public bool is_cache_valid;
		public weak Arv.GcPropertyNode length;
		public weak Arv.GcPropertyNode lsb;
		public weak Arv.GcPropertyNode msb;
		public weak Arv.GcPropertyNode polling_time;
		public weak Arv.GcPropertyNode port;
		public weak Arv.GcPropertyNode sign;
		public weak GLib.SList<void*> swiss_knives;
		public Arv.GcRegisterNodeType type;
		[CCode (array_length = false)]
		public weak char v_string[39];
		public GLib.Type value_type;
		[CCode (has_construct_function = false, type = "ArvGcNode*")]
		public GcRegisterNode ();
		[CCode (has_construct_function = false, type = "ArvGcNode*")]
		public GcRegisterNode.float ();
		public int64 get_masked_integer_value (uint lsb, uint msb) throws GLib.Error;
		[CCode (has_construct_function = false, type = "ArvGcNode*")]
		public GcRegisterNode.integer ();
		[CCode (has_construct_function = false, type = "ArvGcNode*")]
		public GcRegisterNode.masked_integer ();
		public void set_masked_integer_value (uint lsb, uint msb, int64 value) throws GLib.Error;
		[CCode (has_construct_function = false, type = "ArvGcNode*")]
		public GcRegisterNode.string ();
		[CCode (has_construct_function = false, type = "ArvGcNode*")]
		public GcRegisterNode.struct_register ();
	}
	[CCode (cheader_filename = "arv.h", type_id = "arv_gc_struct_entry_node_get_type ()")]
	public class GcStructEntryNode : Arv.GcFeatureNode, Arv.GcInteger, Arv.GcRegister {
		public weak Arv.GcPropertyNode lsb;
		public weak Arv.GcPropertyNode msb;
		public weak Arv.GcPropertyNode sign;
		[CCode (array_length = false)]
		public weak char v_string[39];
		[CCode (has_construct_function = false, type = "ArvGcNode*")]
		public GcStructEntryNode ();
	}
	[CCode (cheader_filename = "arv.h", type_id = "arv_gc_swiss_knife_get_type ()")]
	public class GcSwissKnife : Arv.GcFeatureNode, Arv.GcFloat, Arv.GcInteger {
		public weak GLib.SList<void*> constants;
		public weak GLib.SList<void*> expressions;
		public weak Arv.Evaluator formula;
		public weak Arv.GcPropertyNode formula_node;
		public GLib.Type value_type;
		public weak GLib.SList<void*> variables;
		[CCode (has_construct_function = false, type = "ArvGcNode*")]
		public GcSwissKnife ();
		[CCode (has_construct_function = false, type = "ArvGcNode*")]
		public GcSwissKnife.integer ();
	}
	[CCode (cheader_filename = "arv.h", type_id = "arv_gv_device_get_type ()")]
	public class GvDevice : Arv.Device {
		[CCode (has_construct_function = false, type = "ArvDevice*")]
		public GvDevice (GLib.InetAddress interface_address, GLib.InetAddress device_address);
		[Version (since = "0.6.0")]
		public uint auto_packet_size ();
		[Version (since = "0.2.0")]
		public unowned GLib.SocketAddress get_device_address ();
		[Version (since = "0.2.0")]
		public unowned GLib.SocketAddress get_interface_address ();
		public uint get_packet_size ();
		[Version (since = "0.6.0")]
		public Arv.GvStreamOption get_stream_options ();
		public uint64 get_timestamp_tick_frequency ();
		public static GLib.Regex get_url_regex ();
		public void set_packet_size (uint packet_size);
		[Version (since = "0.6.0")]
		public void set_stream_options (Arv.GvStreamOption options);
	}
	[CCode (cheader_filename = "arv.h", type_id = "arv_gv_fake_camera_get_type ()")]
	public class GvFakeCamera : GLib.Object {
		[CCode (has_construct_function = false)]
		public GvFakeCamera (string interface_name);
		public bool start ();
		public void stop ();
		public string interface_name { construct; }
	}
	[CCode (cheader_filename = "arv.h", type_id = "arv_gv_interface_get_type ()")]
	public class GvInterface : Arv.Interface {
		[CCode (has_construct_function = false)]
		protected GvInterface ();
		public static unowned Arv.Interface get_instance ();
	}
	[CCode (cheader_filename = "arv.h", type_id = "arv_gv_stream_get_type ()")]
	public class GvStream : Arv.Stream {
		[CCode (has_construct_function = false)]
		protected GvStream ();
		public uint16 get_port ();
		public void get_statistics (out uint64 n_resent_packets, out uint64 n_missing_packets);
		[NoAccessorMethod]
		public uint frame_retention { get; set; }
		[NoAccessorMethod]
		public Arv.GvStreamPacketResend packet_resend { get; set; }
		[NoAccessorMethod]
		public uint packet_timeout { get; set; }
		[NoAccessorMethod]
		public Arv.GvStreamSocketBuffer socket_buffer { get; set; }
		[NoAccessorMethod]
		public int socket_buffer_size { get; set; }
	}
	[CCode (cheader_filename = "arv.h", type_id = "arv_interface_get_type ()")]
	public abstract class Interface : GLib.Object {
		[CCode (has_construct_function = false)]
		protected Interface ();
		[Version (since = "0.2.0")]
		public unowned string get_device_address (uint index);
		[Version (since = "0.2.0")]
		public unowned string get_device_id (uint index);
		[Version (since = "0.6.0")]
		public unowned string get_device_model (uint index);
		[Version (since = "0.2.0")]
		public unowned string get_device_physical_id (uint index);
		[Version (since = "0.6.0")]
		public unowned string get_device_protocol (uint index);
		[Version (since = "0.6.0")]
		public unowned string get_device_serial_nbr (uint index);
		[Version (since = "0.6.0")]
		public unowned string get_device_vendor (uint index);
		[Version (since = "0.2.0")]
		public uint get_n_devices ();
		[Version (since = "0.2.0")]
		public virtual Arv.Device open_device (string? device_id);
		[Version (since = "0.2.0")]
		public void update_device_list ();
	}
	[CCode (cheader_filename = "arv.h", type_id = "arv_stream_get_type ()")]
	public abstract class Stream : GLib.Object {
		[CCode (has_construct_function = false)]
		protected Stream ();
		[Version (since = "0.2.0")]
		public bool get_emit_signals ();
		[Version (since = "0.2.0")]
		public void get_n_buffers (out int n_input_buffers, out int n_output_buffers);
		[Version (since = "0.2.0")]
		public virtual void get_statistics (out uint64 n_completed_buffers, out uint64 n_failures, out uint64 n_underruns);
		[Version (since = "0.2.0")]
		public Arv.Buffer pop_buffer ();
		[Version (since = "0.2.0")]
		public void push_buffer (owned Arv.Buffer buffer);
		[Version (since = "0.2.0")]
		public void set_emit_signals (bool emit_signals);
		[Version (since = "0.2.0")]
		public Arv.Buffer timeout_pop_buffer (uint64 timeout);
		[Version (since = "0.2.0")]
		public Arv.Buffer try_pop_buffer ();
		public bool emit_signals { get; set; }
		[Version (since = "0.2.0")]
		public virtual signal void new_buffer ();
	}
	[CCode (cheader_filename = "arv.h", type_id = "arv_uv_device_get_type ()")]
	public class UvDevice : Arv.Device {
		[CCode (has_construct_function = false, type = "ArvDevice*")]
		public UvDevice (string vendor, string product, string serial_nbr);
	}
	[CCode (cheader_filename = "arv.h", type_id = "arv_uv_interface_get_type ()")]
	public class UvInterface : Arv.Interface {
		[CCode (has_construct_function = false)]
		protected UvInterface ();
		public static unowned Arv.Interface get_instance ();
	}
	[CCode (cheader_filename = "arv.h", type_id = "arv_uv_stream_get_type ()")]
	public class UvStream : Arv.Stream {
		[CCode (has_construct_function = false)]
		protected UvStream ();
	}
	[CCode (cheader_filename = "arv.h", type_id = "arv_xml_schema_get_type ()")]
	public class XmlSchema : GLib.Object {
		[CCode (has_construct_function = false)]
		protected XmlSchema ();
		[CCode (has_construct_function = false)]
		public XmlSchema.from_file (GLib.File file);
		[CCode (has_construct_function = false)]
		public XmlSchema.from_path (string path);
		public bool validate (void* xml, size_t size, int line, int column) throws GLib.Error;
	}
	[CCode (cheader_filename = "arv.h", has_type_id = false)]
	[Compact]
	public class Zip {
	}
	[CCode (cheader_filename = "arv.h", has_type_id = false)]
	[Compact]
	public class ZipFile {
	}
	[CCode (cheader_filename = "arv.h", type_cname = "ArvGcFloatInterface", type_id = "arv_gc_float_get_type ()")]
	public interface GcFloat : GLib.Object {
		public abstract double get_inc () throws GLib.Error;
		public abstract double get_max () throws GLib.Error;
		public abstract double get_min () throws GLib.Error;
		public abstract unowned string get_unit () throws GLib.Error;
		public abstract double get_value () throws GLib.Error;
		public abstract void impose_max (double maximum) throws GLib.Error;
		public abstract void impose_min (double minimum) throws GLib.Error;
		public abstract void set_value (double value) throws GLib.Error;
	}
	[CCode (cheader_filename = "arv.h", type_cname = "ArvGcIntegerInterface", type_id = "arv_gc_integer_get_type ()")]
	public interface GcInteger : GLib.Object {
		public abstract int64 get_inc () throws GLib.Error;
		public abstract int64 get_max () throws GLib.Error;
		public abstract int64 get_min () throws GLib.Error;
		public abstract unowned string get_unit () throws GLib.Error;
		public abstract int64 get_value () throws GLib.Error;
		public abstract void impose_max (int64 maximum) throws GLib.Error;
		public abstract void impose_min (int64 minimum) throws GLib.Error;
		public abstract void set_value (int64 value) throws GLib.Error;
	}
	[CCode (cheader_filename = "arv.h", type_cname = "ArvGcRegisterInterface", type_id = "arv_gc_register_get_type ()")]
	public interface GcRegister : GLib.Object {
		public abstract void @get (void* buffer, uint64 length) throws GLib.Error;
		public abstract uint64 get_address () throws GLib.Error;
		public abstract uint64 get_length () throws GLib.Error;
		public abstract void @set (void* buffer, uint64 length) throws GLib.Error;
	}
	[CCode (cheader_filename = "arv.h", type_cname = "ArvGcStringInterface", type_id = "arv_gc_string_get_type ()")]
	public interface GcString : GLib.Object {
		public abstract int64 get_max_length () throws GLib.Error;
		public abstract unowned string get_value () throws GLib.Error;
		public abstract void set_value (string value) throws GLib.Error;
	}
	[CCode (cheader_filename = "arv.h", has_type_id = false)]
	public struct DebugCategory {
		public weak string name;
		public Arv.DebugLevel level;
	}
	[CCode (cheader_filename = "arv.h")]
	[SimpleType]
	public struct PixelFormat : uint32 {
	}
	[CCode (cheader_filename = "arv.h", cprefix = "ARV_ACQUISITION_MODE_", type_id = "arv_acquisition_mode_get_type ()")]
	public enum AcquisitionMode {
		CONTINUOUS,
		SINGLE_FRAME,
		MULTI_FRAME;
		public static Arv.AcquisitionMode from_string (string string);
		public static unowned string to_string (Arv.AcquisitionMode value);
	}
	[CCode (cheader_filename = "arv.h", cprefix = "ARV_AUTO_", type_id = "arv_auto_get_type ()")]
	public enum Auto {
		OFF,
		ONCE,
		CONTINUOUS;
		public static Arv.Auto from_string (string string);
		public static unowned string to_string (Arv.Auto value);
	}
	[CCode (cheader_filename = "arv.h", cprefix = "ARV_BUFFER_PAYLOAD_TYPE_", type_id = "arv_buffer_payload_type_get_type ()")]
	public enum BufferPayloadType {
		UNKNOWN,
		IMAGE,
		RAWDATA,
		FILE,
		CHUNK_DATA,
		EXTENDED_CHUNK_DATA,
		JPEG,
		JPEG2000,
		H264,
		MULTIZONE_IMAGE
	}
	[CCode (cheader_filename = "arv.h", cprefix = "ARV_BUFFER_STATUS_", type_id = "arv_buffer_status_get_type ()")]
	public enum BufferStatus {
		UNKNOWN,
		SUCCESS,
		CLEARED,
		TIMEOUT,
		MISSING_PACKETS,
		WRONG_PACKET_ID,
		SIZE_MISMATCH,
		FILLING,
		ABORTED
	}
	[CCode (cheader_filename = "arv.h", cprefix = "ARV_CHUNK_PARSER_STATUS_", type_id = "arv_chunk_parser_status_get_type ()")]
	public enum ChunkParserStatus {
		UNKNOWN,
		SUCCESS,
		BUFFER_NOT_FOUND,
		CHUNK_NOT_FOUND,
		INVALID_FEATURE_NAME
	}
	[CCode (cheader_filename = "arv.h", cprefix = "ARV_DEBUG_LEVEL_", type_id = "arv_debug_level_get_type ()")]
	public enum DebugLevel {
		NONE,
		WARNING,
		DEBUG,
		LOG,
		COUNT
	}
	[CCode (cheader_filename = "arv.h", cprefix = "ARV_DEVICE_STATUS_", type_id = "arv_device_status_get_type ()")]
	public enum DeviceStatus {
		UNKNOWN,
		SUCCESS,
		TIMEOUT,
		WRITE_ERROR,
		TRANSFER_ERROR,
		NOT_CONNECTED
	}
	[CCode (cheader_filename = "arv.h", cprefix = "ARV_DOM_NODE_TYPE_", type_id = "arv_dom_node_type_get_type ()")]
	public enum DomNodeType {
		ELEMENT_NODE,
		ATTRIBUTE_NODE,
		TEXT_NODE,
		CDATA_SECTION_NODE,
		ENTITY_REFERENCE_NODE,
		ENTITY_NODE,
		PROCESSING_INSTRUCTION_NODE,
		COMMENT_NODE,
		DOCUMENT_NODE,
		DOCUMENT_TYPE_NODE,
		DOCUMENT_FRAGMENT_NODE,
		NOTATION_NODE
	}
	[CCode (cheader_filename = "arv.h", cprefix = "ARV_GC_ACCESS_MODE_", type_id = "arv_gc_access_mode_get_type ()")]
	public enum GcAccessMode {
		RO,
		WO,
		RW
	}
	[CCode (cheader_filename = "arv.h", cprefix = "ARV_GC_CACHABLE_", type_id = "arv_gc_cachable_get_type ()")]
	public enum GcCachable {
		NO_CACHE,
		WRITE_TRHOUGH,
		WRITE_AROUND
	}
	[CCode (cheader_filename = "arv.h", cprefix = "ARV_GC_NAME_SPACE_", type_id = "arv_gc_name_space_get_type ()")]
	public enum GcNameSpace {
		STANDARD,
		CUSTOM
	}
	[CCode (cheader_filename = "arv.h", cprefix = "ARV_GC_PROPERTY_NODE_TYPE_", type_id = "arv_gc_property_node_type_get_type ()")]
	public enum GcPropertyNodeType {
		UNKNOWN,
		VALUE,
		ADDRESS,
		DESCRIPTION,
		TOOLTIP,
		DISPLAY_NAME,
		MINIMUM,
		MAXIMUM,
		INCREMENT,
		UNIT,
		ON_VALUE,
		OFF_VALUE,
		LENGTH,
		FORMULA,
		FORMULA_TO,
		FORMULA_FROM,
		EXPRESSION,
		CONSTANT,
		ACCESS_MODE,
		CACHABLE,
		POLLING_TIME,
		ENDIANESS,
		SIGN,
		LSB,
		MSB,
		BIT,
		COMMAND_VALUE,
		CHUNK_ID,
		P_UNKNONW,
		P_FEATURE,
		P_VALUE,
		P_ADDRESS,
		P_IS_IMPLEMENTED,
		P_IS_LOCKED,
		P_IS_AVAILABLE,
		P_MINIMUM,
		P_MAXIMUM,
		P_INCREMENT,
		P_INDEX,
		P_LENGTH,
		P_PORT,
		P_VARIABLE,
		P_INVALIDATOR,
		P_COMMAND_VALUE
	}
	[CCode (cheader_filename = "arv.h", cprefix = "ARV_GC_REGISTER_NODE_TYPE_", type_id = "arv_gc_register_node_type_get_type ()")]
	public enum GcRegisterNodeType {
		REGISTER,
		INTEGER,
		MASKED_INTEGER,
		FLOAT,
		STRING,
		STRUCT_REGISTER
	}
	[CCode (cheader_filename = "arv.h", cprefix = "ARV_GC_SIGN_", type_id = "arv_gc_sign_get_type ()")]
	public enum GcSign {
		SIGNED,
		UNSIGNED
	}
	[CCode (cheader_filename = "arv.h", cprefix = "ARV_GV_STREAM_OPTION_", type_id = "arv_gv_stream_option_get_type ()")]
	public enum GvStreamOption {
		NONE,
		PACKET_SOCKET_DISABLED
	}
	[CCode (cheader_filename = "arv.h", cprefix = "ARV_GV_STREAM_PACKET_RESEND_", type_id = "arv_gv_stream_packet_resend_get_type ()")]
	public enum GvStreamPacketResend {
		NEVER,
		ALWAYS
	}
	[CCode (cheader_filename = "arv.h", cprefix = "ARV_GV_STREAM_SOCKET_BUFFER_", type_id = "arv_gv_stream_socket_buffer_get_type ()")]
	public enum GvStreamSocketBuffer {
		FIXED,
		AUTO
	}
	[CCode (cheader_filename = "arv.h", cprefix = "ARV_GVCP_COMMAND_", type_id = "arv_gvcp_command_get_type ()")]
	public enum GvcpCommand {
		DISCOVERY_CMD,
		DISCOVERY_ACK,
		BYE_CMD,
		BYE_ACK,
		PACKET_RESEND_CMD,
		PACKET_RESEND_ACK,
		READ_REGISTER_CMD,
		READ_REGISTER_ACK,
		WRITE_REGISTER_CMD,
		WRITE_REGISTER_ACK,
		READ_MEMORY_CMD,
		READ_MEMORY_ACK,
		WRITE_MEMORY_CMD,
		WRITE_MEMORY_ACK,
		PENDING_ACK
	}
	[CCode (cheader_filename = "arv.h", cprefix = "ARV_GVCP_PACKET_TYPE_", type_id = "arv_gvcp_packet_type_get_type ()")]
	public enum GvcpPacketType {
		ACK,
		RESEND,
		CMD,
		ERROR
	}
	[CCode (cheader_filename = "arv.h", cprefix = "ARV_GVSP_CONTENT_TYPE_DATA_", type_id = "arv_gvsp_content_type_get_type ()")]
	public enum GvspContentType {
		LEADER,
		TRAILER,
		BLOCK
	}
	[CCode (cheader_filename = "arv.h", cprefix = "ARV_GVSP_PACKET_TYPE_", type_id = "arv_gvsp_packet_type_get_type ()")]
	public enum GvspPacketType {
		OK,
		RESEND,
		ERROR
	}
	[CCode (cheader_filename = "arv.h", cprefix = "ARV_GVSP_PAYLOAD_TYPE_", type_id = "arv_gvsp_payload_type_get_type ()")]
	public enum GvspPayloadType {
		IMAGE,
		RAWDATA,
		FILE,
		CHUNK_DATA,
		EXTENDED_CHUNK_DATA,
		JPEG,
		JPEG2000,
		H264,
		MULTIZONE_IMAGE
	}
	[CCode (cheader_filename = "arv.h", cprefix = "ARV_STREAM_CALLBACK_TYPE_", type_id = "arv_stream_callback_type_get_type ()")]
	public enum StreamCallbackType {
		INIT,
		EXIT,
		START_BUFFER,
		BUFFER_DONE
	}
	[CCode (cheader_filename = "arv.h", cprefix = "ARV_UVCP_COMMAND_", type_id = "arv_uvcp_command_get_type ()")]
	public enum UvcpCommand {
		READ_MEMORY_CMD,
		READ_MEMORY_ACK,
		WRITE_MEMORY_CMD,
		WRITE_MEMORY_ACK,
		PENDING_ACK,
		EVENT_CMD
	}
	[CCode (cheader_filename = "arv.h", cprefix = "ARV_UVCP_SCHEMA_", type_id = "arv_uvcp_manifest_schema_type_get_type ()")]
	public enum UvcpManifestSchemaType {
		RAW,
		ZIP
	}
	[CCode (cheader_filename = "arv.h", cprefix = "ARV_UVCP_PACKET_TYPE_", type_id = "arv_uvcp_packet_type_get_type ()")]
	public enum UvcpPacketType {
		ERROR,
		ACK,
		CMD
	}
	[CCode (cheader_filename = "arv.h", cprefix = "ARV_UVSP_PACKET_TYPE_", type_id = "arv_uvsp_packet_type_get_type ()")]
	public enum UvspPacketType {
		UNKNOWN,
		LEADER,
		TRAILER,
		DATA
	}
	[CCode (cheader_filename = "arv.h", cprefix = "ARV_UVSP_PAYLOAD_TYPE_", type_id = "arv_uvsp_payload_type_get_type ()")]
	public enum UvspPayloadType {
		IMAGE,
		CHUNK,
		EXTENDED_CHUNK
	}
	[CCode (cheader_filename = "arv.h", cprefix = "ARV_XML_SCHEMA_ERROR_INVALID_", type_id = "arv_xml_schema_error_get_type ()")]
	public enum XmlSchemaError {
		STRUCTURE
	}
	[CCode (cheader_filename = "arv.h", cprefix = "ARV_GC_ERROR_")]
	public errordomain GcError {
		PROPERTY_NOT_DEFINED,
		PVALUE_NOT_DEFINED,
		INVALID_PVALUE,
		EMPTY_ENUMERATION,
		OUT_OF_RANGE;
		public static GLib.Quark quark ();
	}
	[CCode (cheader_filename = "arv.h", has_target = false)]
	public delegate void FakeCameraFillPattern (Arv.Buffer buffer, void* fill_pattern_data, uint32 exposure_time_us, uint32 gain, Arv.PixelFormat pixel_format);
	[CCode (cheader_filename = "arv.h", has_target = false)]
	public delegate void FrameCallback (Arv.Buffer buffer);
	[CCode (cheader_filename = "arv.h", instance_pos = 0.9)]
	public delegate void StreamCallback (Arv.StreamCallbackType type, Arv.Buffer buffer);
	[CCode (cheader_filename = "arv.h", cname = "ARV_FAKE_CAMERA_ACQUISITION_FRAME_RATE_DEFAULT")]
	public const double FAKE_CAMERA_ACQUISITION_FRAME_RATE_DEFAULT;
	[CCode (cheader_filename = "arv.h", cname = "ARV_FAKE_CAMERA_BINNING_HORIZONTAL_DEFAULT")]
	public const int FAKE_CAMERA_BINNING_HORIZONTAL_DEFAULT;
	[CCode (cheader_filename = "arv.h", cname = "ARV_FAKE_CAMERA_BINNING_VERTICAL_DEFAULT")]
	public const int FAKE_CAMERA_BINNING_VERTICAL_DEFAULT;
	[CCode (cheader_filename = "arv.h", cname = "ARV_FAKE_CAMERA_EXPOSURE_TIME_US_DEFAULT")]
	public const double FAKE_CAMERA_EXPOSURE_TIME_US_DEFAULT;
	[CCode (cheader_filename = "arv.h", cname = "ARV_FAKE_CAMERA_HEIGHT_DEFAULT")]
	public const int FAKE_CAMERA_HEIGHT_DEFAULT;
	[CCode (cheader_filename = "arv.h", cname = "ARV_FAKE_CAMERA_MEMORY_SIZE")]
	public const int FAKE_CAMERA_MEMORY_SIZE;
	[CCode (cheader_filename = "arv.h", cname = "ARV_FAKE_CAMERA_REGISTER_ACQUISITION")]
	public const int FAKE_CAMERA_REGISTER_ACQUISITION;
	[CCode (cheader_filename = "arv.h", cname = "ARV_FAKE_CAMERA_REGISTER_ACQUISITION_FRAME_PERIOD_US")]
	public const int FAKE_CAMERA_REGISTER_ACQUISITION_FRAME_PERIOD_US;
	[CCode (cheader_filename = "arv.h", cname = "ARV_FAKE_CAMERA_REGISTER_ACQUISITION_MODE")]
	public const int FAKE_CAMERA_REGISTER_ACQUISITION_MODE;
	[CCode (cheader_filename = "arv.h", cname = "ARV_FAKE_CAMERA_REGISTER_ACQUISITION_START_OFFSET")]
	public const int FAKE_CAMERA_REGISTER_ACQUISITION_START_OFFSET;
	[CCode (cheader_filename = "arv.h", cname = "ARV_FAKE_CAMERA_REGISTER_BINNING_HORIZONTAL")]
	public const int FAKE_CAMERA_REGISTER_BINNING_HORIZONTAL;
	[CCode (cheader_filename = "arv.h", cname = "ARV_FAKE_CAMERA_REGISTER_BINNING_VERTICAL")]
	public const int FAKE_CAMERA_REGISTER_BINNING_VERTICAL;
	[CCode (cheader_filename = "arv.h", cname = "ARV_FAKE_CAMERA_REGISTER_EXPOSURE_TIME_US")]
	public const int FAKE_CAMERA_REGISTER_EXPOSURE_TIME_US;
	[CCode (cheader_filename = "arv.h", cname = "ARV_FAKE_CAMERA_REGISTER_FRAME_START_OFFSET")]
	public const int FAKE_CAMERA_REGISTER_FRAME_START_OFFSET;
	[CCode (cheader_filename = "arv.h", cname = "ARV_FAKE_CAMERA_REGISTER_GAIN_MODE")]
	public const int FAKE_CAMERA_REGISTER_GAIN_MODE;
	[CCode (cheader_filename = "arv.h", cname = "ARV_FAKE_CAMERA_REGISTER_GAIN_RAW")]
	public const int FAKE_CAMERA_REGISTER_GAIN_RAW;
	[CCode (cheader_filename = "arv.h", cname = "ARV_FAKE_CAMERA_REGISTER_HEIGHT")]
	public const int FAKE_CAMERA_REGISTER_HEIGHT;
	[CCode (cheader_filename = "arv.h", cname = "ARV_FAKE_CAMERA_REGISTER_PIXEL_FORMAT")]
	public const int FAKE_CAMERA_REGISTER_PIXEL_FORMAT;
	[CCode (cheader_filename = "arv.h", cname = "ARV_FAKE_CAMERA_REGISTER_SENSOR_HEIGHT")]
	public const int FAKE_CAMERA_REGISTER_SENSOR_HEIGHT;
	[CCode (cheader_filename = "arv.h", cname = "ARV_FAKE_CAMERA_REGISTER_SENSOR_WIDTH")]
	public const int FAKE_CAMERA_REGISTER_SENSOR_WIDTH;
	[CCode (cheader_filename = "arv.h", cname = "ARV_FAKE_CAMERA_REGISTER_TEST")]
	public const int FAKE_CAMERA_REGISTER_TEST;
	[CCode (cheader_filename = "arv.h", cname = "ARV_FAKE_CAMERA_REGISTER_TRIGGER_ACTIVATION")]
	public const int FAKE_CAMERA_REGISTER_TRIGGER_ACTIVATION;
	[CCode (cheader_filename = "arv.h", cname = "ARV_FAKE_CAMERA_REGISTER_TRIGGER_MODE")]
	public const int FAKE_CAMERA_REGISTER_TRIGGER_MODE;
	[CCode (cheader_filename = "arv.h", cname = "ARV_FAKE_CAMERA_REGISTER_TRIGGER_SOURCE")]
	public const int FAKE_CAMERA_REGISTER_TRIGGER_SOURCE;
	[CCode (cheader_filename = "arv.h", cname = "ARV_FAKE_CAMERA_REGISTER_WIDTH")]
	public const int FAKE_CAMERA_REGISTER_WIDTH;
	[CCode (cheader_filename = "arv.h", cname = "ARV_FAKE_CAMERA_REGISTER_X_OFFSET")]
	public const int FAKE_CAMERA_REGISTER_X_OFFSET;
	[CCode (cheader_filename = "arv.h", cname = "ARV_FAKE_CAMERA_REGISTER_Y_OFFSET")]
	public const int FAKE_CAMERA_REGISTER_Y_OFFSET;
	[CCode (cheader_filename = "arv.h", cname = "ARV_FAKE_CAMERA_SENSOR_HEIGHT")]
	public const int FAKE_CAMERA_SENSOR_HEIGHT;
	[CCode (cheader_filename = "arv.h", cname = "ARV_FAKE_CAMERA_SENSOR_WIDTH")]
	public const int FAKE_CAMERA_SENSOR_WIDTH;
	[CCode (cheader_filename = "arv.h", cname = "ARV_FAKE_CAMERA_TEST_REGISTER_DEFAULT")]
	public const int FAKE_CAMERA_TEST_REGISTER_DEFAULT;
	[CCode (cheader_filename = "arv.h", cname = "ARV_FAKE_CAMERA_WIDTH_DEFAULT")]
	public const int FAKE_CAMERA_WIDTH_DEFAULT;
	[CCode (cheader_filename = "arv.h", cname = "ARV_PIXEL_FORMAT_BAYER_BG_10")]
	public const int PIXEL_FORMAT_BAYER_BG_10;
	[CCode (cheader_filename = "arv.h", cname = "ARV_PIXEL_FORMAT_BAYER_BG_12")]
	public const int PIXEL_FORMAT_BAYER_BG_12;
	[CCode (cheader_filename = "arv.h", cname = "ARV_PIXEL_FORMAT_BAYER_BG_12_PACKED")]
	public const int PIXEL_FORMAT_BAYER_BG_12_PACKED;
	[CCode (cheader_filename = "arv.h", cname = "ARV_PIXEL_FORMAT_BAYER_BG_16")]
	public const int PIXEL_FORMAT_BAYER_BG_16;
	[CCode (cheader_filename = "arv.h", cname = "ARV_PIXEL_FORMAT_BAYER_BG_8")]
	public const int PIXEL_FORMAT_BAYER_BG_8;
	[CCode (cheader_filename = "arv.h", cname = "ARV_PIXEL_FORMAT_BAYER_GB_10")]
	public const int PIXEL_FORMAT_BAYER_GB_10;
	[CCode (cheader_filename = "arv.h", cname = "ARV_PIXEL_FORMAT_BAYER_GB_12")]
	public const int PIXEL_FORMAT_BAYER_GB_12;
	[CCode (cheader_filename = "arv.h", cname = "ARV_PIXEL_FORMAT_BAYER_GB_12_PACKED")]
	public const int PIXEL_FORMAT_BAYER_GB_12_PACKED;
	[CCode (cheader_filename = "arv.h", cname = "ARV_PIXEL_FORMAT_BAYER_GB_16")]
	public const int PIXEL_FORMAT_BAYER_GB_16;
	[CCode (cheader_filename = "arv.h", cname = "ARV_PIXEL_FORMAT_BAYER_GB_8")]
	public const int PIXEL_FORMAT_BAYER_GB_8;
	[CCode (cheader_filename = "arv.h", cname = "ARV_PIXEL_FORMAT_BAYER_GR_10")]
	public const int PIXEL_FORMAT_BAYER_GR_10;
	[CCode (cheader_filename = "arv.h", cname = "ARV_PIXEL_FORMAT_BAYER_GR_12")]
	public const int PIXEL_FORMAT_BAYER_GR_12;
	[CCode (cheader_filename = "arv.h", cname = "ARV_PIXEL_FORMAT_BAYER_GR_12_PACKED")]
	public const int PIXEL_FORMAT_BAYER_GR_12_PACKED;
	[CCode (cheader_filename = "arv.h", cname = "ARV_PIXEL_FORMAT_BAYER_GR_16")]
	public const int PIXEL_FORMAT_BAYER_GR_16;
	[CCode (cheader_filename = "arv.h", cname = "ARV_PIXEL_FORMAT_BAYER_GR_8")]
	public const int PIXEL_FORMAT_BAYER_GR_8;
	[CCode (cheader_filename = "arv.h", cname = "ARV_PIXEL_FORMAT_BAYER_RG_10")]
	public const int PIXEL_FORMAT_BAYER_RG_10;
	[CCode (cheader_filename = "arv.h", cname = "ARV_PIXEL_FORMAT_BAYER_RG_12")]
	public const int PIXEL_FORMAT_BAYER_RG_12;
	[CCode (cheader_filename = "arv.h", cname = "ARV_PIXEL_FORMAT_BAYER_RG_12_PACKED")]
	public const int PIXEL_FORMAT_BAYER_RG_12_PACKED;
	[CCode (cheader_filename = "arv.h", cname = "ARV_PIXEL_FORMAT_BAYER_RG_16")]
	public const int PIXEL_FORMAT_BAYER_RG_16;
	[CCode (cheader_filename = "arv.h", cname = "ARV_PIXEL_FORMAT_BAYER_RG_8")]
	public const int PIXEL_FORMAT_BAYER_RG_8;
	[CCode (cheader_filename = "arv.h", cname = "ARV_PIXEL_FORMAT_BGRA_8_PACKED")]
	public const int PIXEL_FORMAT_BGRA_8_PACKED;
	[CCode (cheader_filename = "arv.h", cname = "ARV_PIXEL_FORMAT_BGR_10_PACKED")]
	public const int PIXEL_FORMAT_BGR_10_PACKED;
	[CCode (cheader_filename = "arv.h", cname = "ARV_PIXEL_FORMAT_BGR_12_PACKED")]
	public const int PIXEL_FORMAT_BGR_12_PACKED;
	[CCode (cheader_filename = "arv.h", cname = "ARV_PIXEL_FORMAT_BGR_8_PACKED")]
	public const int PIXEL_FORMAT_BGR_8_PACKED;
	[CCode (cheader_filename = "arv.h", cname = "ARV_PIXEL_FORMAT_CUSTOM_BAYER_BG_12_PACKED")]
	public const int PIXEL_FORMAT_CUSTOM_BAYER_BG_12_PACKED;
	[CCode (cheader_filename = "arv.h", cname = "ARV_PIXEL_FORMAT_CUSTOM_BAYER_BG_16")]
	public const int PIXEL_FORMAT_CUSTOM_BAYER_BG_16;
	[CCode (cheader_filename = "arv.h", cname = "ARV_PIXEL_FORMAT_CUSTOM_BAYER_GB_12_PACKED")]
	public const int PIXEL_FORMAT_CUSTOM_BAYER_GB_12_PACKED;
	[CCode (cheader_filename = "arv.h", cname = "ARV_PIXEL_FORMAT_CUSTOM_BAYER_GB_16")]
	public const int PIXEL_FORMAT_CUSTOM_BAYER_GB_16;
	[CCode (cheader_filename = "arv.h", cname = "ARV_PIXEL_FORMAT_CUSTOM_BAYER_GR_12_PACKED")]
	public const int PIXEL_FORMAT_CUSTOM_BAYER_GR_12_PACKED;
	[CCode (cheader_filename = "arv.h", cname = "ARV_PIXEL_FORMAT_CUSTOM_BAYER_GR_16")]
	public const int PIXEL_FORMAT_CUSTOM_BAYER_GR_16;
	[CCode (cheader_filename = "arv.h", cname = "ARV_PIXEL_FORMAT_CUSTOM_BAYER_RG_12_PACKED")]
	public const int PIXEL_FORMAT_CUSTOM_BAYER_RG_12_PACKED;
	[CCode (cheader_filename = "arv.h", cname = "ARV_PIXEL_FORMAT_CUSTOM_BAYER_RG_16")]
	public const int PIXEL_FORMAT_CUSTOM_BAYER_RG_16;
	[CCode (cheader_filename = "arv.h", cname = "ARV_PIXEL_FORMAT_CUSTOM_YUV_422_YUYV_PACKED")]
	public const int PIXEL_FORMAT_CUSTOM_YUV_422_YUYV_PACKED;
	[CCode (cheader_filename = "arv.h", cname = "ARV_PIXEL_FORMAT_MONO_10")]
	public const int PIXEL_FORMAT_MONO_10;
	[CCode (cheader_filename = "arv.h", cname = "ARV_PIXEL_FORMAT_MONO_10_PACKED")]
	public const int PIXEL_FORMAT_MONO_10_PACKED;
	[CCode (cheader_filename = "arv.h", cname = "ARV_PIXEL_FORMAT_MONO_12")]
	public const int PIXEL_FORMAT_MONO_12;
	[CCode (cheader_filename = "arv.h", cname = "ARV_PIXEL_FORMAT_MONO_12_PACKED")]
	public const int PIXEL_FORMAT_MONO_12_PACKED;
	[CCode (cheader_filename = "arv.h", cname = "ARV_PIXEL_FORMAT_MONO_14")]
	public const int PIXEL_FORMAT_MONO_14;
	[CCode (cheader_filename = "arv.h", cname = "ARV_PIXEL_FORMAT_MONO_16")]
	public const int PIXEL_FORMAT_MONO_16;
	[CCode (cheader_filename = "arv.h", cname = "ARV_PIXEL_FORMAT_MONO_8")]
	public const int PIXEL_FORMAT_MONO_8;
	[CCode (cheader_filename = "arv.h", cname = "ARV_PIXEL_FORMAT_MONO_8_SIGNED")]
	public const int PIXEL_FORMAT_MONO_8_SIGNED;
	[CCode (cheader_filename = "arv.h", cname = "ARV_PIXEL_FORMAT_RGBA_8_PACKED")]
	public const int PIXEL_FORMAT_RGBA_8_PACKED;
	[CCode (cheader_filename = "arv.h", cname = "ARV_PIXEL_FORMAT_RGB_10_PACKED")]
	public const int PIXEL_FORMAT_RGB_10_PACKED;
	[CCode (cheader_filename = "arv.h", cname = "ARV_PIXEL_FORMAT_RGB_10_PLANAR")]
	public const int PIXEL_FORMAT_RGB_10_PLANAR;
	[CCode (cheader_filename = "arv.h", cname = "ARV_PIXEL_FORMAT_RGB_12_PACKED")]
	public const int PIXEL_FORMAT_RGB_12_PACKED;
	[CCode (cheader_filename = "arv.h", cname = "ARV_PIXEL_FORMAT_RGB_12_PLANAR")]
	public const int PIXEL_FORMAT_RGB_12_PLANAR;
	[CCode (cheader_filename = "arv.h", cname = "ARV_PIXEL_FORMAT_RGB_16_PLANAR")]
	public const int PIXEL_FORMAT_RGB_16_PLANAR;
	[CCode (cheader_filename = "arv.h", cname = "ARV_PIXEL_FORMAT_RGB_8_PACKED")]
	public const int PIXEL_FORMAT_RGB_8_PACKED;
	[CCode (cheader_filename = "arv.h", cname = "ARV_PIXEL_FORMAT_RGB_8_PLANAR")]
	public const int PIXEL_FORMAT_RGB_8_PLANAR;
	[CCode (cheader_filename = "arv.h", cname = "ARV_PIXEL_FORMAT_YUV_411_PACKED")]
	public const int PIXEL_FORMAT_YUV_411_PACKED;
	[CCode (cheader_filename = "arv.h", cname = "ARV_PIXEL_FORMAT_YUV_422_PACKED")]
	public const int PIXEL_FORMAT_YUV_422_PACKED;
	[CCode (cheader_filename = "arv.h", cname = "ARV_PIXEL_FORMAT_YUV_422_YUYV_PACKED")]
	public const int PIXEL_FORMAT_YUV_422_YUYV_PACKED;
	[CCode (cheader_filename = "arv.h", cname = "ARV_PIXEL_FORMAT_YUV_444_PACKED")]
	public const int PIXEL_FORMAT_YUV_444_PACKED;
	[CCode (cheader_filename = "arv.h")]
	public static bool debug_check (Arv.DebugCategory category, Arv.DebugLevel level);
	[CCode (cheader_filename = "arv.h")]
	public static void debug_enable (string category_selection);
	[CCode (cheader_filename = "arv.h")]
	public static void debug_shutdown ();
	[CCode (cheader_filename = "arv.h")]
	public static void disable_interface (string interface_id);
	[CCode (cheader_filename = "arv.h")]
	public static void dom_implementation_add_document_type (string qualified_name, GLib.Type document_type);
	[CCode (cheader_filename = "arv.h")]
	public static void dom_implementation_cleanup ();
	[CCode (cheader_filename = "arv.h")]
	public static Arv.DomDocument dom_implementation_create_document (string namespace_uri, string qualified_name);
	[CCode (cheader_filename = "arv.h")]
	public static void enable_interface (string interface_id);
	[CCode (cheader_filename = "arv.h")]
	[Version (since = "0.6.0")]
	public static unowned string get_device_address (uint index);
	[CCode (cheader_filename = "arv.h")]
	[Version (since = "0.2.0")]
	public static unowned string get_device_id (uint index);
	[CCode (cheader_filename = "arv.h")]
	[Version (since = "0.6.0")]
	public static unowned string get_device_model (uint index);
	[CCode (cheader_filename = "arv.h")]
	[Version (since = "0.2.0")]
	public static unowned string get_device_physical_id (uint index);
	[CCode (cheader_filename = "arv.h")]
	[Version (since = "0.6.0")]
	public static unowned string get_device_protocol (uint index);
	[CCode (cheader_filename = "arv.h")]
	[Version (since = "0.6.0")]
	public static unowned string get_device_serial_nbr (uint index);
	[CCode (cheader_filename = "arv.h")]
	[Version (since = "0.6.0")]
	public static unowned string get_device_vendor (uint index);
	[CCode (cheader_filename = "arv.h")]
	public static unowned string get_fake_camera_genicam_xml (size_t size);
	[CCode (cheader_filename = "arv.h")]
	public static unowned string get_interface_id (uint index);
	[CCode (cheader_filename = "arv.h")]
	public static uint get_n_devices ();
	[CCode (cheader_filename = "arv.h")]
	public static uint get_n_interfaces ();
	[CCode (cheader_filename = "arv.h")]
	[Version (since = "0.4.0")]
	public static bool make_thread_high_priority (int nice_level);
	[CCode (cheader_filename = "arv.h")]
	[Version (since = "0.4.0")]
	public static bool make_thread_realtime (int priority);
	[CCode (cheader_filename = "arv.h")]
	[Version (since = "0.2.0")]
	public static Arv.Device open_device (string? device_id);
	[CCode (cheader_filename = "arv.h")]
	public static void set_fake_camera_genicam_filename (string filename);
	[CCode (cheader_filename = "arv.h")]
	public static void shutdown ();
	[CCode (cheader_filename = "arv.h")]
	public static void update_device_list ();
}
